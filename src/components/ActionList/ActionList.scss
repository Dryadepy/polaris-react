@import '../../styles/common';

$image-size: rem(20px);
$item-min-height: rem(40px);
$item-vertical-padding: ($item-min-height - line-height(body)) / 2;

.ActionList {
  list-style: none;
  margin: 0;
  padding: spacing(tight) 0;
}

.Section-withoutTitle:not(:first-child) {
  border-top: border('divider');
  margin-top: spacing(tight);
  padding-top: spacing(tight);
}

.Actions {
  list-style: none;
  margin: 0;
  padding: 0 spacing(tight);
  border-top: border('divider');
  border-color: var(--p-surface-neutral);

  // stylelint-disable-next-line selector-max-class
  .Title + & {
    padding-top: spacing(tight);
  }
}

.ActionList,
.Section:first-child {
  // stylelint-disable-next-line selector-max-class, selector-max-combinators, selector-max-specificity
  > .Section-withoutTitle .Actions {
    border-top: none;
  }
}

.Title {
  @include text-style-subheading;
  padding: (spacing(tight) * 1.5) spacing();
}

.Item {
  @include unstyled-button;
  @include unstyled-link;
  display: block;
  width: 100%;
  min-height: $item-min-height;
  padding: $item-vertical-padding spacing(tight);
  text-align: left;
  cursor: pointer;
  border-radius: var(--p-border-radius-base);
  border-top: 1px solid var(--p-surface);

  &::-moz-focus-inner {
    border: none;
  }

  // States
  // Hovered (:hover)
  &:hover {
    background-color: var(--p-surface-hovered);
    color: inherit;
    text-decoration: none;

    @media (-ms-high-contrast: active) {
      outline: 1px solid ms-high-contrast-color('text');
    }
  }
  // Active (.active, :active)
  // We need to decide if the .active state appears as pressed or focused
  // Focused might be odd, as another item could be focused simultaneously
  &.active,
  &:active {
    @include recolor-icon(var(--p-interactive));
  }

  &:active {
    background-color: var(--p-surface-pressed);
  }

  &.active {
    background-color: var(--p-surface-selected);
  }

  // Only show when the button is selected, not active
  [aria-selected='true'] > &::before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: -1 * spacing(extra-tight);
    height: 100%;
    width: $active-indicator-width;
    background-color: var(--p-interactive);
    border-top-right-radius: var(--p-border-radius-base);
    border-bottom-right-radius: var(--p-border-radius-base);
    transform: translateX(-100%);
  }

  @include focus-ring;

  &:focus:not(:active) {
    @include focus-ring($style: 'focused');
  }

  // Destructive (.destructive)
  &.destructive {
    @include recolor-icon(var(--p-icon-critical));
    color: var(--p-interactive-critical);
  }

  // Hovered (:hover)
  &.destructive:hover {
    background-color: var(--p-surface-critical-subdued-hovered);
  }

  // Destructive, active (.destructive.active, .destructive:active)
  // stylelint-disable-next-line selector-max-class
  &.destructive.active,
  &.destructive:active {
    background-color: var(--p-surface-critical-subdued-pressed);
  }

  // Disabled (.disabled)
  &.disabled {
    color: var(--p-text-disabled);
    // stylelint-disable-next-line selector-max-class
    .Prefix,
    .Suffix {
      @include recolor-icon(var(--p-icon-disabled));
    }
  }

  &::-moz-focus-inner {
    border: none;
  }

  // stylelint-disable selector-max-class
  // stylelint-disable selector-max-specificity
  &.newDesignLanguage {
    padding: $item-vertical-padding spacing(tight);
    border-radius: var(--p-border-radius-base);
    border-top: 1px solid var(--p-surface);
    // States
    // Hovered (:hover)
    &:hover {
      background-image: none;
      background-color: var(--p-surface-hovered);
      color: inherit;
      text-decoration: none;

      @media (-ms-high-contrast: active) {
        outline: 1px solid ms-high-contrast-color('text');
      }
    }
    // Active (.active, :active)
    // We need to decide if the .active state appears as pressed or focused
    // Focused might be odd, as another item could be focused simultaneously
    &.active,
    &:active {
      background-image: none;
      @include recolor-icon(var(--p-interactive));
    }

    &:active {
      background-color: var(--p-surface-pressed);
    }

    &.active {
      background-color: var(--p-surface-selected);
    }

    // Only show when the button is selected, not active
    [aria-selected='true'] > &::before {
      @include list-selected-indicator;
    }

    // Active, hovered, focused (:active:hover:focus)
    &:active:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Hovered, focused (:hover:focus)
    &:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Focused (:focus)
    &:focus {
      box-shadow: none;
      background-image: none;
    }

    @include focus-ring;

    &:focus:not(:active) {
      @include focus-ring($style: 'focused');
    }

    // Destructive (.destructive)
    &.destructive {
      @include recolor-icon(var(--p-icon-critical));
      color: var(--p-interactive-critical);
    }

    // Hovered (:hover)
    &.destructive:hover {
      background-image: none;
      background-color: var(--p-surface-critical-subdued-hovered);
    }

    // Destructive, active (.destructive.active, .destructive:active)
    &.destructive.active,
    &.destructive:active {
      background-image: none;
      background-color: var(--p-surface-critical-subdued-pressed);
    }

    // Destructive, active, hovered, focused (.destructive:active:hover:focus)
    &.destructive:active:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Destructive, hovered, focused (.destructive:hover:focus)
    &.destructive:hover:focus {
      box-shadow: none;
      background-image: none;
    }

    // Destructive, focused (.destructive:focus)
    &.destructive:focus {
      box-shadow: none;
      background-image: none;
    }

    // Disabled (.disabled)
    &.disabled {
      background-image: none;
      color: var(--p-text-disabled);
      .Prefix,
      .Suffix {
        @include recolor-icon(var(--p-icon-disabled));
      }
    }
  }
  // stylelint-enable selector-max-specificity
  // stylelint-enable selector-max-class
}

.Content {
  display: flex;
  align-items: center;
}

.Prefix {
  @include recolor-icon(var(--p-icon));
  display: flex;
  flex: 0 0 auto;
  justify-content: center;
  align-items: center;
  height: $image-size;
  width: $image-size;
  border-radius: border-radius();

  // We need the negative margin to ensure that the image does not set
  // the minimum height of the action item.
  margin: (-0.5 * $image-size) spacing() (-0.5 * $image-size) 0;
  background-size: cover;
  background-position: center center;
}

.Suffix {
  @include recolor-icon(var(--p-icon));
  margin-left: spacing();
}

.Text {
  @include layout-flex-fix;
  flex: 1 1 auto;
}
